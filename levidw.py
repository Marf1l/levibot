import telebot
import hashlib
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import yt_dlp
import os
from flask import Flask, request



# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —Ç–≤–æ–∏–º API —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot("YOUR_API_TOKEN")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –µ–≥–æ.\n")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–∞–º
url_dict = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å TikTok –∏–ª–∏ YouTube —Å—Å—ã–ª–∫–∞–º–∏
@bot.message_handler(func=lambda message: "tiktok.com" in message.text or "vm.tiktok.com" in message.text)
def handle_video_request(message: Message):
    url = message.text.strip()
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å—Å—ã–ª–∫–∏
    url_hash = hashlib.md5(url.encode()).hexdigest()[:8]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞ –¥–ª—è —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    url_dict[url_hash] = url  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à-—Å—Å—ã–ª–∫–∏
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=create_format_buttons(url_hash))

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
def create_format_buttons(url_hash):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("üé• –í–∏–¥–µ–æ", callback_data=f"video|{url_hash}"),
               InlineKeyboardButton("üé∂ –ê—É–¥–∏–æ", callback_data=f"audio|{url_hash}"))
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_format_selection(call):
    action, url_hash = call.data.split('|')
    url = url_dict.get(url_hash)  # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ —Ö–µ—à—É

    if not url:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    bot.answer_callback_query(call.id)  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É

    if action == "video":
        bot.send_message(call.message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")
        download_and_send_media(call.message.chat.id, url, media_type='video')
    elif action == "audio":
        bot.send_message(call.message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ...")
        download_and_send_media(call.message.chat.id, url, media_type='audio')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ffmpeg
def download_and_send_media(chat_id, url, media_type='video'):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
    unique_filename = hashlib.md5(url.encode()).hexdigest()[:8]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞
    
    if media_type == 'video':
        ydl_opts = {
            'format': 'best[ext=mp4]/best[ext=webm]',  # –í—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ mp4, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            'outtmpl': f'downloads/{unique_filename}.%(ext)s',
            'noplaylist': True,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
            'quiet': True,  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
            'postprocessors': [{
                'key': 'FFmpegVideoConvertor',
                'preferedformat': 'mp4',  # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç mp4 –¥–ª—è –≤–∏–¥–µ–æ
            }],
            'writethumbnail': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∏–Ω–∏–∞—Ç—é—Ä
            'no_warnings': True,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            'merge_output_format': 'mp4',  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç mp4
            'extractor_args': {
                'tiktok': ['--no-watermark'],  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¥–ª—è TikTok
            },
        }
    else:  # media_type == 'audio'
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': f'downloads/{unique_filename}.%(ext)s',
            'noplaylist': True,
            'quiet': True,
            'no_warnings': True,
        }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
        with open(filename, 'rb') as file:
            if media_type == 'video':
                bot.send_video(chat_id, file, caption="üé• –í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ!")
            else:
                bot.send_audio(chat_id, file, caption="üé∂ –í–æ—Ç —Ç–≤–æ–µ –∞—É–¥–∏–æ!")

        # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–∏–º Flask –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook
app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return 'OK', 200

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    bot.remove_webhook()  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    bot.set_webhook(url="https://levidw.fly.dev/webhook")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)
